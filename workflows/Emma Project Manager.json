{
  "active": false,
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get a repository",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a repository": {
      "main": [
        [
          {
            "node": "AI Agent - Plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Plan",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent - Plan",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model - Pro": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Plan",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model - Flash": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Plan",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent - Plan",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "GitHub MCP Client1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Do",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model - Pro1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Do",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model - Flash1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Do",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent - Do",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Plan": {
      "main": [
        [
          {
            "node": "AI Agent - Do",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get issues of a repository",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get issues of a repository": {
      "main": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model - Pro2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model - Flash2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Chat Memory2": {
      "ai_memory": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in Data table": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Upsert row(s) in Data table": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GitHub MCP Client2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Jules MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Jules Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Jules Manager": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-10-09T13:18:54.844Z",
  "id": "9NxJVrGSVPqntguB",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Emma Project Manager",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1536,
        -128
      ],
      "id": "fb7db757-986c-4a7f-b1c2-f86e01aeaed3",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "repository",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "xNok",
          "mode": "list",
          "cachedResultName": "xNok",
          "cachedResultUrl": "https://github.com/xNok"
        },
        "repository": {
          "__rl": true,
          "value": "emma",
          "mode": "name"
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1328,
        -128
      ],
      "id": "7ea3a12b-8719-4294-9434-2be6b4448de3",
      "name": "Get a repository",
      "webhookId": "587579cc-160d-48b5-ba7c-63f93d3ae0f0",
      "credentials": {
        "githubOAuth2Api": {
          "id": "3UvuWq60yLsVEaPS",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://api.githubcopilot.com/mcp/",
        "authentication": "bearerAuth",
        "include": "selected",
        "includeTools": [
          "get_discussion",
          "get_discussion_comments",
          "get_file_contents",
          "get_issue",
          "get_issue_comments",
          "get_latest_release",
          "get_project_item",
          "get_pull_request",
          "get_pull_request_diff",
          "get_pull_request_files",
          "get_pull_request_review_comments",
          "get_pull_request_reviews",
          "get_pull_request_status",
          "list_discussions",
          "list_issues",
          "list_project_items",
          "list_projects",
          "list_pull_requests",
          "list_releases",
          "list_sub_issues",
          "search_code"
        ],
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        -576,
        48
      ],
      "id": "40e3fd16-cf1a-43c6-92ba-29163288289e",
      "name": "GitHub MCP Client",
      "credentials": {
        "httpBearerAuth": {
          "id": "T0UhF4CDhEaFWmLy",
          "name": "GitHub MCP - Bearer Auth"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"AI Project Manager Output\",\n  \"description\": \"Schema to validate the structured output from the AI project manager agent.\",\n  \"type\": \"object\",\n  \"required\": [\n    \"assessment\",\n    \"actions\"\n  ],\n  \"properties\": {\n    \"assessment\": {\n      \"type\": \"object\",\n      \"description\": \"The AI's summary of the current project state.\",\n      \"required\": [\n        \"timestamp\",\n        \"status\",\n        \"summary\",\n        \"reviewed_documents\",\n        \"reviewed_summaries\"\n      ],\n      \"properties\": {\n        \"timestamp\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\",\n          \"description\": \"ISO 8601 timestamp of when the assessment was made.\"\n        },\n        \"status\": {\n          \"type\": \"string\",\n          \"description\": \"The status of the assessment run.\",\n          \"enum\": [\n            \"complete\",\n            \"error\"\n          ]\n        },\n        \"summary\": {\n          \"type\": \"string\",\n          \"description\": \"A one-sentence summary of the project's current state.\"\n        },\n        \"reviewed_documents\": {\n          \"type\": \"array\",\n          \"description\": \"List of design document paths that were reviewed.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"reviewed_summaries\": {\n          \"type\": \"array\",\n          \"description\": \"List of agent summary paths that were reviewed.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"actions\": {\n      \"type\": \"object\",\n      \"description\": \"A list of proposed actions to be taken on GitHub.\",\n      \"required\": [\n        \"update_github_project\",\n        \"create_github_issue\",\n        \"follow_up_github_issue\"\n      ],\n      \"properties\": {\n        \"update_github_project\": {\n          \"type\": \"array\",\n          \"description\": \"Tasks to update on the GitHub project board.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"task_id\",\n              \"new_status\",\n              \"comment\"\n            ],\n            \"properties\": {\n              \"task_id\": {\n                \"type\": \"string\"\n              },\n              \"new_status\": {\n                \"type\": \"string\"\n              },\n              \"comment\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"create_github_issue\": {\n          \"type\": \"array\",\n          \"description\": \"New issues to be created.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"title\",\n              \"body\"\n            ],\n            \"properties\": {\n              \"title\": {\n                \"type\": \"string\"\n              },\n              \"body\": {\n                \"type\": \"string\"\n              },\n              \"labels\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"assignee\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"follow_up_github_issue\": {\n          \"type\": \"array\",\n          \"description\": \"Existing issues that require a follow-up comment.\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\n              \"issue_number\",\n              \"comment\"\n            ],\n            \"properties\": {\n              \"issue_number\": {\n                \"type\": \"integer\"\n              },\n              \"comment\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -464,
        32
      ],
      "id": "1fad3d5a-b112-42fe-bd4f-239d5054ac93",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -448,
        144
      ],
      "id": "b8dbacaf-413d-4094-946f-2229460329d2",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1024,
        112
      ],
      "id": "bea1d45c-a6e3-4181-958d-c6ddd2a65dea",
      "name": "Google Gemini Chat Model - Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -864,
        112
      ],
      "id": "8fd2c62b-5890-478f-9540-a35179d4a422",
      "name": "Google Gemini Chat Model - Flash",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Plan",
        "height": 560,
        "width": 1072
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1088,
        -272
      ],
      "typeVersion": 1,
      "id": "2e7d81c4-c388-4739-ab8d-b20b0a7dc7fb",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=repo-id-{{ $json.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -704,
        48
      ],
      "id": "9c5cc14f-02d1-44e7-9560-324fb0dbcaa1",
      "name": "Chat Memory",
      "credentials": {
        "postgres": {
          "id": "L567D9TEFo7ESa08",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "https://api.githubcopilot.com/mcp/",
        "authentication": "bearerAuth",
        "include": "selected",
        "includeTools": [
          "create_issue",
          "update_issue",
          "add_issue_comment",
          "get_issue_comments",
          "list_issues",
          "search_issues",
          "search_code",
          "reprioritize_sub_issue",
          "remove_sub_issue",
          "list_sub_issues",
          "list_releases",
          "list_pull_requests",
          "list_discussions",
          "add_sub_issue"
        ],
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        576,
        96
      ],
      "id": "71169888-cabd-4ce1-9485-abbff636768e",
      "name": "GitHub MCP Client1",
      "credentials": {
        "httpBearerAuth": {
          "id": "T0UhF4CDhEaFWmLy",
          "name": "GitHub MCP - Bearer Auth"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        128,
        112
      ],
      "id": "1e71eaa0-2fd6-4375-8313-37dff917e883",
      "name": "Google Gemini Chat Model - Pro1",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        288,
        112
      ],
      "id": "147ef809-0010-4f5a-a4df-1b2fe2514d89",
      "name": "Google Gemini Chat Model - Flash1",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Appy",
        "height": 560,
        "width": 736,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        64,
        -272
      ],
      "typeVersion": 1,
      "id": "44126abe-19b4-42b5-918a-b20e3922d8bc",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=repo-id-{{ $json.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        432,
        80
      ],
      "id": "5c34f5fe-98a6-4158-9862-6d7e79147bf7",
      "name": "Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "L567D9TEFo7ESa08",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=repo_url:  {{ $('Get a repository').item.json.html_url }}\n\nPlan to execute\n{{ $json.output.toJsonString() }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are an **AI Action Executor**. Your sole purpose is to execute a given plan using the provided tools. You do **not** make decisions or analyze documents, those are provided by the previous agent.\n\n**Core Directive:**\n\n1.  **Ingest Plan:**\n\n      * You will receive a plan as a structured JSON object.\n\n2.  **Execute Actions:**\n\n      * Systematically process the tasks listed in the `actions` section of the input JSON.\n      * For each item in `update_github_project`, perform the necessary calls to update the project board.\n      * For each item in `create_github_issue`, perform calls to create a new issue.\n      * For each item in `follow_up_github_issue`, perform the calls to add a comment to the specified issue.\n\n3.  **Report Results:**\n\n      * After attempting all actions, provide a summary of your operations as your final output.",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        384,
        -128
      ],
      "id": "389ccb5e-fa6d-4590-835f-484c6adb0a5f",
      "name": "AI Agent - Do"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=repo_url:  {{ $json.html_url }}",
        "hasOutputParser": true,
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are an autonomous AI Project Manager. Your primary directive is to assess the current project status, identify next steps, and ensure forward momentum by managing tasks directly within the GitHub repository.\n\n## **Core Operational Loop**\n\nExecute the following steps sequentially:\n\n1.  **State Assessment:**\n    * Access the `/docs/` directory.\n    * **Review Design Documents:** Analyze the root design documents, specifically files matching the pattern `[0-9][0-9]-*.md` (e.g., `00-overview.md`, `01-architecture.md`). These documents represent the project's intended state.\n    * **Review Summaries:** Analyze all agent progress reports located in `/docs/agents-summaries/`. These summaries represent the project's actual current state. Focus on the most recents summaries.\n    * **Review Open Issues**: fetch the current open issue and assess which my have been addressed and which need followup \n\n2.  **Analysis and Task Identification:**\n    * Compare the project's actual state (from agent summaries) with the intended state (from design documents).\n    * Identify key discrepancies, completed milestones, and critical next actions required to align the project with its design goals.\n\n3.  **GitHub Action & Management:**\n    * **Update Project:** Reflect your findings on the main GitHub project board. Move tasks, update statuses, or add relevant notes.\n    * **Create Issues:** For any new, important, or follow-up tasks you identified, create a new GitHub issue. Ensure the issue title is clear and the body contains sufficient context for resolution.\n    * **Follow-Up:** Review all currently open issues. If an issue has seen no recent activity or is blocked, add a comment to prompt for an update or offer assistance.\n\nYes, you should include the example in your system prompt.\n\nIncluding a JSON structure example is the most reliable way to ensure the AI's output is consistently formatted, which is crucial for your n8n workflow to parse it correctly.\n\nAdd a section to your prompt like this:\n\n## **Output Format**\n\nYou MUST respond ONLY with a JSON object matching this exact structure. Do not add any text outside the JSON block.\n\n```json\n{\n  \"assessment\": {\n    \"timestamp\": \"YYYY-MM-DDTHH:MM:SSZ\",\n    \"status\": \"<complete|error>\",\n    \"summary\": \"<summary text>\",\n    \"reviewed_documents\": [\"<path>\"],\n    \"reviewed_summaries\": [\"<path>\"]\n  },\n  \"actions\": {\n    \"update_github_project\": [\n      {\n        \"task_id\": \"<task_identifier>\",\n        \"new_status\": \"<status>\",\n        \"comment\": \"<comment text>\"\n      }\n    ],\n    \"create_github_issue\": [\n      {\n        \"title\": \"<issue title>\",\n        \"body\": \"<issue body>\",\n        \"labels\": [\"<label>\"],\n        \"assignee\": \"<username>\"\n      }\n    ],\n    \"follow_up_github_issue\": [\n      {\n        \"issue_number\": 123,\n        \"comment\": \"<comment text>\"\n      }\n    ]\n  }\n}\n```",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -768,
        -128
      ],
      "id": "484abc9c-b64f-4159-af57-779d4c61b97f",
      "name": "AI Agent - Plan"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1696,
        592
      ],
      "id": "76fbc3cd-03db-40ed-8021-2d5c699960b3",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "repository",
        "owner": {
          "__rl": true,
          "value": "xnok",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "emma",
          "mode": "name"
        },
        "limit": 1,
        "getRepositoryIssuesFilters": {
          "sort": "created",
          "direction": "asc"
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1216,
        592
      ],
      "id": "6d11ca91-6b93-4390-8a8a-5f532cd2c47f",
      "name": "Get issues of a repository",
      "webhookId": "1bf80512-ecc5-4bac-99e7-550ae2fa31d6",
      "credentials": {
        "githubOAuth2Api": {
          "id": "3UvuWq60yLsVEaPS",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -992,
        896
      ],
      "id": "6b16185b-6c23-4e05-928b-94ee24332051",
      "name": "Google Gemini Chat Model - Pro2",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -832,
        896
      ],
      "id": "7191a199-9ed3-46b8-9b4d-b832578f7cd9",
      "name": "Google Gemini Chat Model - Flash2",
      "credentials": {
        "googlePalmApi": {
          "id": "1fjSF4AQTr66EKc3",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=jules-manager-v3"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -672,
        912
      ],
      "id": "a0da2774-12e6-4b59-8a26-c8359957afed",
      "name": "Chat Memory2",
      "credentials": {
        "postgres": {
          "id": "L567D9TEFo7ESa08",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=source (repo): {{ $json.repository_url }}\nissue_url: {{ $json.url }}\n\nissues_details: {{ $json.toJsonString() }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=## Task Delegation & Supervision for Jules\n\n**Role:** You are an AI Triage Agent.\n\n**Goal:** Analyze GitHub issues to either delegate new, suitable tasks to \"Jules\" (an AI developer) or supervise Jules' progress on already-assigned tasks.\n\n### **Context & Tools**\n\n  * **GitHub Issues:** You receive the URL, description, and comments for each issue.\n    * **Always** take issue comments into considerations\n  * **Jules API:** You can create sessions and interact with them (list activities, send messages).\n    * When creating a session use `AUTO_CREATE_PR` as `automationMode`\n    * When creating a session all properties of `sourceContext` are required and source is define after the repo `sources/github/{owner}/{repo}`\n  * **Data Table:** A key-value store mapping `issue_url` to an active `session_id`. This is your single source of truth for Jules' current workload.\n  * **GitHub API:** You can post comments on issues.\n\n### **Core Workflow**\n\nWhen you are triggered by activity on a GitHub issue, your first step is to check the data table.\n\n1.  **Triage the Issue:** Query the data table using the issue URL.\n      * **If a `session_id` EXISTS for this issue:** The task is already assigned. Proceed to **Path A: Supervise Existing Task**.\n      * **If a `session_id` DOES NOT exist:** This is a new or unassigned task. Proceed to **Path B: Evaluate New Task**.\n\n\n### **➡️ Path A: Supervise Existing Task**\n\nYour goal is to check Jules' progress, answer its questions if possible, and keep the GitHub issue updated.\n\n1.  **Get Context:**\n\n      * Retrieve the `session_id` from the data table.\n      * Call the Jules API to list the latest activities for that session).\n\n2.  **Analyze & Act:** Review the most recent activities.\n\n      * **If Jules is asking a question:**\n          * Analyze the question against the context of the GitHub issue.\n          * If you can provide a clear, factual answer, send it to Jules\n          * If the question requires human input (e.g., a design choice), **escalate by commenting on the GitHub issue**: `\"@human-reviewer, Jules needs input on the following: [Quote Jules' question here].\"`\n      * **If Jules has provided a progress update:**\n          * Summarize the update and post it as a comment on the GitHub issue to keep stakeholders informed: `\"Jules update: [Summarize the progress, e.g., 'The initial component structure has been created.']\"`\n      * **If there are no new updates:** No action is needed.\n\n### **➡️ Path B: Evaluate New Task**\n\nYour goal is to determine if this unassigned task is a good fit for Jules.\n\n1.  **Assess Suitability:** Analyze the issue's description and comments. A suitable task is a well-defined, actionable. \n    * Take into consideration user's comments about the task.\n\n2.  **Decision & Action:**\n\n      * **If the task IS SUITABLE:**\n\n        1.  **Create a Jules Session:** Call Jules with a detailed prompt. **This is critical for providing context.**\n        2.  **Update Data Table:** After creating the session, add the new `{ \"issue_url\": \"session_id\" }` mapping.\n        3.  **Comment on GitHub:** Notify everyone of the assignment: `\"✅ This issue has been assigned to Jules. Progress can be tracked here: [Jules Session URL]/{session_id}\"`\n\n      * **If the task is UNSUITABLE:**\n\n          * **Comment on GitHub** to ask for more information: `\"This issue needs more detail before it can be assigned for development. Please clarify the acceptance criteria or provide specific steps to reproduce.\"`\n          * **Take user's comment's into consideration**",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -720,
        592
      ],
      "id": "4a392811-f7bf-4662-9d16-f2c78249812c",
      "name": "AI Agent - Jules Manager"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "iDJ9nN7jNwdWtqQq",
          "mode": "list",
          "cachedResultName": "Jules Activity Tracking",
          "cachedResultUrl": "/projects/pEasCL2U1IIauWlx/datatables/iDJ9nN7jNwdWtqQq"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "issueURL",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions1_Value', ``, 'string') }}"
            }
          ]
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}"
      },
      "type": "n8n-nodes-base.dataTableTool",
      "typeVersion": 1,
      "position": [
        -464,
        912
      ],
      "id": "f72925b7-5998-43e2-b6ff-f825e9d1802f",
      "name": "Get row(s) in Data table"
    },
    {
      "parameters": {
        "operation": "upsert",
        "dataTableId": {
          "__rl": true,
          "value": "iDJ9nN7jNwdWtqQq",
          "mode": "list",
          "cachedResultName": "Jules Activity Tracking",
          "cachedResultUrl": "/projects/pEasCL2U1IIauWlx/datatables/iDJ9nN7jNwdWtqQq"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "issueURL",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('conditions0_Value', ``, 'string') }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Completed": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Completed', ``, 'boolean') }}",
            "issueURL": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('issueURL', ``, 'string') }}",
            "repositoryURL": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('repositoryURL', ``, 'string') }}",
            "sessionID": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('sessionID', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "sessionID",
              "displayName": "sessionID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "repositoryURL",
              "displayName": "repositoryURL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "issueURL",
              "displayName": "issueURL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Completed",
              "displayName": "Completed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "n8n-nodes-base.dataTableTool",
      "typeVersion": 1,
      "position": [
        -320,
        912
      ],
      "id": "2b4babab-95ed-49e1-b559-da3062176d71",
      "name": "Upsert row(s) in Data table"
    },
    {
      "parameters": {
        "endpointUrl": "https://api.githubcopilot.com/mcp/",
        "authentication": "bearerAuth",
        "include": "selected",
        "includeTools": [
          "get_issue",
          "get_issue_comments",
          "list_issues",
          "list_issue_types",
          "list_sub_issues",
          "search_issues",
          "add_issue_comment",
          "pull_request_read"
        ],
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        16,
        912
      ],
      "id": "3d635bfb-a0b3-4520-8fb3-be80600e4747",
      "name": "GitHub MCP Client2",
      "credentials": {
        "httpBearerAuth": {
          "id": "T0UhF4CDhEaFWmLy",
          "name": "GitHub MCP - Bearer Auth"
        }
      }
    },
    {
      "parameters": {
        "endpointUrl": "http://mcphub_mcphub:3000/mcp/jules-mcp",
        "authentication": "bearerAuth",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        -160,
        912
      ],
      "id": "fbfe4fb1-4dda-4662-9fdf-3d57bbdaf870",
      "name": "Jules MCP Client",
      "credentials": {
        "httpBearerAuth": {
          "id": "HFPSSgOojfCADypv",
          "name": "MCPHUB Bearer Auth"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-09T13:18:54.853Z",
      "updatedAt": "2025-10-09T13:18:54.853Z",
      "role": "workflow:owner",
      "workflowId": "9NxJVrGSVPqntguB",
      "projectId": "pEasCL2U1IIauWlx"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-16T15:33:25.000Z",
  "versionId": "af2fbbdc-2d7b-458b-8ccd-108638a1913d"
}