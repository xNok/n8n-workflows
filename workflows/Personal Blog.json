{
  "active": true,
  "connections": {
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Notion Trigger": {
      "main": [
        [
          {
            "node": "Global",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Blog Archetype": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Content Editor": {
      "main": [
        []
      ]
    },
    "GitHub List Files": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Create Blog Article": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Edit Blog Article": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Blog Example": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create New Git Branch": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Branch Creator",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Branch Creator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GitHub": {
      "main": [
        [
          {
            "node": "Github Branches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Git Branch": {
      "ai_tool": [
        [
          {
            "node": "AI Agent Branch Creator",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Global": {
      "main": [
        [
          {
            "node": "GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create GitHub Pull Request": {
      "ai_tool": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Branch Creator": {
      "main": [
        [
          {
            "node": "AI Agent - Content Editor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Github Branches": {
      "main": [
        [
          {
            "node": "AI Agent Branch Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-23T21:54:14.919Z",
  "id": "1tuqjyRTlJ3tO7lq",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Personal Blog",
  "nodes": [
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        300,
        -260
      ],
      "id": "00b73f85-8c9f-4cc8-ad08-e326d5ad3f3b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "NtlUZLNkurhNWplg",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 15,
              "unit": "minutes"
            }
          ]
        },
        "event": "pagedUpdatedInDatabase",
        "databaseId": {
          "__rl": true,
          "value": "57fedf47-e462-48bd-a400-5adf88ecf008",
          "mode": "list",
          "cachedResultName": "Published Articles",
          "cachedResultUrl": "https://www.notion.so/57fedf47e46248bda4005adf88ecf008"
        }
      },
      "type": "n8n-nodes-base.notionTrigger",
      "typeVersion": 1,
      "position": [
        -920,
        -560
      ],
      "id": "903683a2-6781-450e-90e8-5d3a8e6c736c",
      "name": "Notion Trigger",
      "credentials": {
        "notionApi": {
          "id": "WfCmw0zchSH9Yw4W",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Read The content of a notion Page by ID",
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "mode": "id",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Block', ``, 'string') }}"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "fetchNestedBlocks": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Also_Fetch_Nested_Blocks', ``, 'boolean') }}"
      },
      "type": "n8n-nodes-base.notionTool",
      "typeVersion": 2.2,
      "position": [
        380,
        60
      ],
      "id": "263db593-d4de-4a49-abbb-7c0c8bf3e23d",
      "name": "Notion",
      "credentials": {
        "notionApi": {
          "id": "WfCmw0zchSH9Yw4W",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Fetch GitHub Blog Archetype",
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.owner.login }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.name }}",
          "mode": "name"
        },
        "filePath": "website/archetypes/default.md",
        "asBinaryProperty": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('As_Binary_Property', ``, 'boolean') }}",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        280,
        60
      ],
      "id": "58544514-5712-4d36-a8e7-6ba8fc727e4e",
      "name": "GitHub Blog Archetype",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Message from the previous agent:\n{{ $json.output }}\n\nData From the article:\n{{ $('Notion Trigger').item.json.toJsonString() }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=**Role and Goal:**\n\nYou are my portfolio's editorial assistant. Your task is to automatically update my portfolio on GitHub whenever a new article is added to my Notion database. You will create or update blog entries in Markdown format, following a specific structure and style. Your primary focus is summarizing the article content and formatting it for my blog. You will not write code or implement features.\n\n**Outcome**\n* Provide the merge request URL you have created with the new or updated blof entry for review\n\n**Workflow:**\n\n1.  **Check for Existing Blog Entry:**\n    * Examine the if the file `website/content/english/blogs/{YYYY-MM-DD}-{title-slug}.md` already exists on GitHub.\n    * If it exists, this is an update; if not, it's a new entry.\n2.  **Fetch Article from Notion:**\n    * Use the provided Notion article ID (`{{ $('Notion Trigger').item.json.id }}`) to retrieve the full article content.\n3.  **Retrieve Example Blog Entry:**\n    * Fetch an existing example blog entry to understand the desired structure and style.\n4.  **Retrieve Blog Template:**\n    * Fetch the base blog template (Hugo archetype) from the designated GitHub repository.\n5.  **Generate/Update Markdown Content:**\n    * **Summarization:** Create a concise summary of the Notion article's key points.\n    * **Formatting:**\n        * Apply the formatting and style observed in the Example Blog Entry, make sure it follows the archetype.\n        * Content should start with a link to the original article (aka. {{ $('Notion Trigger').item.json.URL }})\n        * Insert the summery into the main body of the blog post.\n        * Adhere to the filename convention: `{YYYY-MM-DD}-{title-slug}.md`.\n    * **Update Considerations:**\n        * If updating an existing entry, make minimal changes, focusing on updating the article content.\n        * Maintain the existing structure (e.g., number of sections) as much as possible.\n        * Images url can be obtained from the Notion article\n6.  **Submit Pull Request:**\n    * Commit the new or updated Markdown file to `website/content/english/blogs/{YYYY-MM-DD}-{title-slug}.md`.\n    * Submit a pull request to the repository owner for review and merging.\n\n**Content Style Guide**\n\n* **Links**: Llinks should be given a title instead of the bare url\n* **Keyworks**: Try to identify important keyworkds in the summary and use bold (aka. **text**) to hilight them.\n* **Pronons**: Write as me describiting an article I have writtin in the past use \"I\", when talking to the reader use \"You\".\n\n**Key Clarifications:**\n\n* **Filename Convention:** Use `{YYYY-MM-DD}-{title-slug}.md` for all blog entry filenames.\n* **Branch Name**: the Github branch to use when submitting content should be provided by the previous Agent\n* **Create vs Update**: the action to create and update a new entry are different, make sure to use the right tool.\n* **On Update**: Always submit a merge request for an update, you may inform me in the body that you didn't find much changes, but try you best to improve the existing content anyway.\n* **Minimal Updates:** When updating existing entries, preserve the original structure and make only necessary changes to the content.\n* **Focus on Content:** Your primary responsibility is summarizing and formatting the article content, not coding or trying to implement new features.\n* **Hand off:** the result of this process is to be handed off to the next AI agent in the chain.\n** **Pull Request Creation error**: if creating a pull request faild do not try again it mostlikely meant that it already exists"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        420,
        -420
      ],
      "id": "0a0632eb-352d-4c84-a2ba-93ca7036ca09",
      "name": "AI Agent - Content Editor"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.name }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.owner.login }}",
          "mode": "name"
        },
        "filePath": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Path', ``, 'string') }}",
        "asBinaryProperty": false,
        "additionalParameters": {
          "reference": "auto-website"
        }
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        480,
        60
      ],
      "id": "4938eeb2-cedb-4a21-82ed-30125d255a76",
      "name": "GitHub List Files",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "GitHub Create Blog Article, if it doesn not already exist",
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.owner.login }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.name }}",
          "mode": "name"
        },
        "filePath": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Path', ``, 'string') }}",
        "fileContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Content', ``, 'string') }}",
        "commitMessage": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Commit_Message', ``, 'string') }}",
        "additionalParameters": {
          "branch": {
            "branch": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Branch', ``, 'string') }}"
          }
        }
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        680,
        60
      ],
      "id": "8b9923d8-a54e-45f7-ac62-6053242b1625",
      "name": "GitHub Create Blog Article",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Edit Blog Article",
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.owner.login }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.name }}",
          "mode": "name"
        },
        "filePath": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Path', ``, 'string') }}",
        "fileContent": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('File_Content', ``, 'string') }}",
        "commitMessage": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Commit_Message', ``, 'string') }}",
        "additionalParameters": {
          "branch": {
            "branch": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Branch', ``, 'string') }}"
          }
        }
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        840,
        60
      ],
      "id": "dad4b038-f68e-4de6-9a7a-81b6397f24e2",
      "name": "GitHub Edit Blog Article",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Fetch GitHub Blog Example - A previous entry already created that meet our standards",
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.owner.login }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('GitHub').item.json.name }}",
          "mode": "name"
        },
        "filePath": "website/content/english/blogs/2024-06-23-building-a-devsecops-culture-the-security-champions-program.md",
        "asBinaryProperty": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('As_Binary_Property', ``, 'boolean') }}",
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.githubTool",
      "typeVersion": 1,
      "position": [
        180,
        60
      ],
      "id": "1c9b3735-0d1a-4913-adc6-cdaea1c084de",
      "name": "GitHub Blog Example",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Create a new branch for the specified project on Github",
        "method": "POST",
        "url": "={{ $('GitHub').item.json.url }}/git/refs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "  {\n      \"ref\": \"refs/heads/{NEW-BRANCH-NAME}\",\n      \"sha\": \"{HASH-TO-BRANCH-FROM}\"\n  }",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "NEW-BRANCH-NAME",
              "description": "new chanch name"
            },
            {
              "name": "HASH-TO-BRANCH-FROM",
              "description": "Hash to branch from"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        100,
        -320
      ],
      "id": "f55c4c0b-8431-4133-a4e6-4b201c195898",
      "name": "Create New Git Branch",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -200,
        -420
      ],
      "id": "32dc1863-cbb5-4d19-aab5-6bb452485cf4",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "NtlUZLNkurhNWplg",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "repository",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo }}",
          "mode": "name"
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -500,
        -560
      ],
      "id": "9a066d72-799e-4954-a791-374673c3f700",
      "name": "GitHub",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Create a new branch for the specified project on Github",
        "url": "={{ $('GitHub').item.json.url }}/git/refs/heads/{BRANCH-NAME}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubOAuth2Api",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "BRANCH-NAME",
              "description": "branch name"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -60,
        -320
      ],
      "id": "e69ee7f4-7073-4b69-b4f0-782c3c394aad",
      "name": "Get Git Branch",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "492df5a6-f329-4b77-b885-bd5b169674e0",
              "name": "owner",
              "value": "xNok",
              "type": "string"
            },
            {
              "id": "81a70dab-7609-457e-9269-35a91f893393",
              "name": "repo",
              "value": "xNok",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -640,
        -560
      ],
      "id": "1c324a3b-fc86-445c-8d21-08fb828125ac",
      "name": "Global"
    },
    {
      "parameters": {
        "toolDescription": "Create Pull-Request on Github to submit completed work ",
        "method": "POST",
        "url": "={{ $('GitHub').item.json.url }}/pulls",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{TITLE}\",\n  \"body\": \"{BODY}\",\n  \"head\": \"{NEW-BRANCH-NAME}\",\n  \"base\": \"{BASE-BRANCH-NAME}\"\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "TITLE",
              "type": "string"
            },
            {
              "name": "BODY",
              "type": "string"
            },
            {
              "name": "NEW-BRANCH-NAME",
              "type": "string"
            },
            {
              "name": "BASE-BRANCH-NAME",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        980,
        60
      ],
      "id": "595d1363-cd2c-4b8d-a1d8-d15881097171",
      "name": "Create GitHub Pull Request",
      "credentials": {
        "githubOAuth2Api": {
          "id": "S9AffrrX7P2CgGz3",
          "name": "GitHub account"
        },
        "githubApi": {
          "id": "S1lkprAtfGVidye2",
          "name": "GitHub account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "=Article data:\n{{ $('Notion Trigger').item.json.toJsonString() }}\n\n\nRepository data: \n{{ $('GitHub').item.json.toJsonString() }}\n\nRepository Branches\n{{ $json.toJsonString() }}",
        "options": {
          "systemMessage": "=1.  **Retrieve Main Branch SHA:**\n    * Obtain the current SHA (Secure Hash Algorithm) of the `main` branch in the designated GitHub repository. This is essential for creating a new branch from the latest commit.\n\n2 **List Existing branches**\n  * if a similar banche already exist especially starting with the same date it is safe to assume that a branch was already created for this articles, if so simply inform the next agent of the branche name.\n\n3.  **Create New Branch:**\n    * Generate a new branch with the following naming convention: `{YYYY-MM-DD}-{title-slug}`.\nfriendly slug derived from the article's title (e.g., replace spaces with hyphens, lowercase all letters).\n    * Create this new branch based on the retrieved `main` branch SHA.\n\n**Key Clarifications:**\n* *Branch Creation failure*: if you are unable to create the branch, it might already exist, try to get the branch with that name to confirm"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -120,
        -560
      ],
      "id": "28774f4c-39c6-477e-8efb-a354ddab41ed",
      "name": "AI Agent Branch Creator"
    },
    {
      "parameters": {
        "content": "## Analyse the content\n",
        "height": 220,
        "width": 480
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        120,
        0
      ],
      "typeVersion": 1,
      "id": "014c047c-04ad-46eb-91cb-0e4897c74522",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Publish Content\n",
        "height": 220,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        0
      ],
      "typeVersion": 1,
      "id": "02b68048-74ab-4dcc-9aa3-a3c7fee3ca17",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}/branches",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -360,
        -560
      ],
      "id": "6ef72c76-0b31-4727-8731-491ebe7427b6",
      "name": "Github Branches",
      "credentials": {
        "githubApi": {
          "id": "S1lkprAtfGVidye2",
          "name": "GitHub account 2"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Notion Trigger": {
      "lastTimeChecked": "2025-02-28T15:51:00.000Z",
      "possibleDuplicates": [
        "aaf038f3-dcb5-4a74-9f77-de2a0f4d903b",
        "dd400932-f8c2-4312-a25d-548ec51429ec"
      ]
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-02-28T15:51:24.000Z",
  "versionId": "2a9817c1-2b7b-4771-966c-6ac5b8e58832"
}